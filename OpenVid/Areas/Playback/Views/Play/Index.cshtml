@model OpenVid.Areas.Playback.Models.Play.PlayViewModel
@{
    ViewBag.Title = Model.Update.Name;
    ViewBag.SearchString = Model.SearchString;
}
<div class="video-container">
            <div class="youtube-theme">
                <video id="youtube-theme" data-shaka-player height="720" autostart></video>
            </div>

        <script>
            var url = 'foo.mp4'

            const support = await shaka.Player.probeSupport();
            if (support.manifest.mpd) {
                url = 'foo.mpd';
            } else if ((support.manifest.hls)) {
                url = 'foo.m3u8';
            }

            async function init() {
                const video = document.getElementById('youtube-theme');
                const ui = video['ui'];
                const config = {
                    'seekBarColors': {
                        base: 'rgba(255,255,255,.2)',
                        buffered: 'rgba(255,255,255,.4)',
                        played: 'rgb(255,0,0)',
                    }
                }
                ui.configure(config);

                const controls = ui.getControls();
                const player = controls.getPlayer();

                try {
                    await player.load('@Model.VideoSources.First()');
                } catch (error) {
                }

                $('.shaka-overflow-menu-button').html('settings');
                $('.shaka-back-to-overflow-button .material-icons-round').html('arrow_back_ios_new');
            }
            document.addEventListener('shaka-ui-loaded', init);
        </script>



</div>

<div class="container">
    @{await Html.RenderPartialAsync("_UpdateForm", Model.Update);}
</div>
