@model OpenVid.Areas.Playback.Models.Update.UpdateFormViewModel

<form class="col-6" method="post" action="@Url.Action(SiteMap.Playback_Update)">
    @if (Model.IsFlaggedForDeletion)
    {
        <div class="form-group">
            <div class="alert alert-danger">FLAGGED FOR DELETION</div>
        </div>
    }
    <div class="form-group">
        <label>Video Name:</label>
        @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
    </div>
    @Html.HiddenFor(m => m.Id)
    @foreach (var metadata in Model.Metadata)
    {

        <div class="form-group">
            MD5: @metadata.Md5 <a href="@Url.Action(SiteMap.Playback_Play, new { Id = Model.Id })">[View]</a>
            <br />
            Dimensions: @(metadata.Width)x@(metadata.Height)
            <br />
            Size:  @((int)(metadata.Size/1024)/1024) MB
        </div>
    }
    <div class="form-group ui-widget">
        <label>Tags:</label>
        @Html.TextAreaFor(m => m.Tags, new { @class = "form-control", style = "word-break: break-word; height: 100px;" })
        <br />
        <div class="row">
            @foreach (var item in Model.SuggestedTags)
            {
                <div class="col-2 mb-4">
                    <b>@item.TagName</b>
                    @foreach (var tag in item.RelatedTags)
                    {
                        <br />
                        <span class="tag-suggestion @(tag.AlreadyUsed? "selected" : "")" data-tag="@tag.TagName">@tag.TagName</span>
                    }
                </div>
            }
        </div>
    </div>
    <div class="form-group">
        <label>Description:</label>
        @Html.TextBoxFor(m => m.Description, new { @class = "form-control", style = "word-break: break-word;" })
    </div>
    <div class="form-group">
        <label>Rating:</label>
        @Html.DropDownListFor(n => n.RatingId, new SelectList(Model.PossibleRatings, "Id", "Name"), "Unrated", new { @class = "form-control", style = "word-break: break-word;" })
    </div>
    <input type="submit" />
    <input type="submit" value="Delete" formaction="@Url.Action(SiteMap.FlagDelete)" />
</form>



<link rel="stylesheet" href="https://code.jquery.com/ui/1.13.1/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/jquery-3.6.0.js"></script>
<script src="https://code.jquery.com/ui/1.13.1/jquery-ui.js"></script>
<script>
    $("#Tags").keypress(function (e) {
        if (e.which === 13 && !e.shiftKey) {
            e.preventDefault();

            $(this).closest("form").submit();
        }
    });

    $(function () {

        var availableTags = [];

        function split(val) {
            return val.split(/ \s*/);
        }
        function extractLast(term) {
            return split(term).pop();
        }

        $.ajax({
            type: 'GET',
            url: '@Url.Action(SiteMap.Playback_TagGetTags)',
            success: function (data) {
                availableTags = data;
            },
            error: function (error) {
                alert('Unable to get video tag list.');
            }
        });

        $("#Tags")
            // don't navigate away from the field on tab when selecting an item
            .on("keydown", function (event) {
                if (event.keyCode === $.ui.keyCode.TAB &&
                    $(this).autocomplete("instance").menu.active) {
                    event.preventDefault();
                }
            })
            .autocomplete({
                minLength: 0,
                source: function (request, response) {
                    // delegate back to autocomplete, but extract the last term
                    response($.ui.autocomplete.filter(
                        availableTags, extractLast(request.term)));
                },
                focus: function () {
                    // prevent value inserted on focus
                    return false;
                },
                select: function (event, ui) {
                    var terms = split(this.value);
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join(" ");
                    return false;
                }
            });
    });

    $(".tag-suggestion").click(function (e) {
        var existingTags = $('#Tags').val();
        var thisTag = $(this).attr('data-tag');

        if (existingTags.indexOf(thisTag) == -1) {
            $('#Tags').val(existingTags + ' ' + thisTag + ' ');
            $('[data-tag=' + thisTag+']').addClass('selected');
        }
        else {
            var regexExp = new RegExp(thisTag, 'g');
            $('#Tags').val(existingTags.replace(regexExp, ''));
            $('[data-tag=' + thisTag + ']').removeClass('selected');
        }
    });
</script>